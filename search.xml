<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>201403-3</title>
      <link href="/2020/04/14/201403-3/"/>
      <url>/2020/04/14/201403-3/</url>
      
        <content type="html"><![CDATA[<h2 id="试题编号：-201403-3"><a href="#试题编号：-201403-3" class="headerlink" title="试题编号： 201403-3"></a>试题编号： 201403-3</h2><h2 id="试题名称：命令行选项"><a href="#试题名称：命令行选项" class="headerlink" title="试题名称：命令行选项"></a>试题名称：命令行选项</h2><h3 id="时间限制：1-0s"><a href="#时间限制：1-0s" class="headerlink" title="时间限制：1.0s"></a>时间限制：1.0s</h3><h3 id="内存限制：256-0"><a href="#内存限制：256-0" class="headerlink" title="内存限制：256.0"></a>内存限制：256.0</h3><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote><p>　　请你写一个命令行分析程序,用以分析给定的命令行里包含哪些选项。每个命令行由若干个字符串组成,它们之间恰好由一个空格分隔。这些字符串中的第一个为该命令行工具的名字,由小写字母组成,你的程序不用对它进行处理。在工具名字之后可能会包含若干选项,然后可能会包含一 些不是选项的参数。<br>　　选项有两类:带参数的选项和不带参数的选项。一个合法的无参数选项的形式是一个减号后面跟单个小写字母,如”-a” 或”-b”。而带参数选项则由两个由空格分隔的字符串构成,前者的格式要求与无参数选项相同,后者则是该选项的参数,是由小写字母,数字和减号组成的非空字符串。<br>　　该命令行工具的作者提供给你一个格式字符串以指定他的命令行工具需要接受哪些选项。这个字符串由若干小写字母和冒号组成,其中的每个小写字母表示一个该程序接受的选项。如果该小写字母后面紧跟了一个冒号,它就表示一个带参数的选项,否则则为不带参数的选项。例如, “ab:m:” 表示该程序接受三种选项,即”-a”(不带参数),”-b”(带参数), 以及”-m”(带参数)。<br>　　命令行工具的作者准备了若干条命令行用以测试你的程序。对于每个命令行,你的工具应当一直向后分析。当你的工具遇到某个字符串既不是合法的选项,又不是某个合法选项的参数时,分析就停止。命令行剩余的未分析部分不构成该命令的选项,因此你的程序应当忽略它们。\</p></blockquote><span id="more"></span><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><blockquote><p>　　输入的第一行是一个格式字符串,它至少包含一个字符,且长度不超过 52。格式字符串只包含小写字母和冒号,保证每个小写字母至多出现一次,不会有两个相邻的冒号,也不会以冒号开头。<br>　　输入的第二行是一个正整数 N(1 ≤ N ≤ 20),表示你需要处理的命令行的个数。<br>　　接下来有 N 行,每行是一个待处理的命令行,它包括不超过 256 个字符。该命令行一定是若干个由单个空格分隔的字符串构成,每个字符串里只包含小写字母,数字和减号。</p></blockquote><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><blockquote><p>　　输出有 N 行。其中第 i 行以”Case i:” 开始,然后应当有恰好一个空格,然后应当按照字母升序输出该命令行中用到的所有选项的名称,对于带参数的选项,在输出它的名称之后还要输出它的参数。如果一个选项在命令行中出现了多次,只输出一次。如果一个带参数的选项在命令行中出 现了多次,只输出最后一次出现时所带的参数。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">ls -a -l -a documents -b</span><br><span class="line">ls</span><br><span class="line">ls -w 10 -x -w 15</span><br><span class="line">ls -a -b -c -d -e -l</span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><figcaption><span>1: -a -l</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Case 2:</span><br><span class="line">Case 3: -w 15 -x</span><br><span class="line">Case 4: -a -b</span><br></pre></td></tr></table></figure><h4 id="附上一组易错数据"><a href="#附上一组易错数据" class="headerlink" title="附上一组易错数据"></a>附上一组易错数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">in:</span><br><span class="line">albw:x</span><br><span class="line">7</span><br><span class="line">ls -a -l -a documents -b</span><br><span class="line">lsagf</span><br><span class="line">ls -w 10 -x -w 15</span><br><span class="line">ls -a -b -w -c -d -e -l</span><br><span class="line">lss -a -w asdfa -w 10asdf -w dfwdsfadf</span><br><span class="line">ls -a -wt </span><br><span class="line">ls -w -ww -a -w bbb -w</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">out:</span><br><span class="line">Case 1: -a -l</span><br><span class="line">Case 2:</span><br><span class="line">Case 3: -w 15 -x</span><br><span class="line">Case 4: -a -b -w -c</span><br><span class="line">Case 5: -a -w dfwdsfadf</span><br><span class="line">Case 6: -a</span><br><span class="line">Case 7: -a -w bbb</span><br></pre></td></tr></table></figure><br><hr><br><h3 id="分析与解答"><a href="#分析与解答" class="headerlink" title="分析与解答"></a>分析与解答</h3><ol><li>采用逐字分析的方式</li><li>采用先读入，后判断的方式<br></li></ol><p>Code1:<br>预处理：去掉fgets末尾的结束符；<br>判断：去掉命令名，逐个判断选项合法性，如果其带参数：判断紧接着的字段；如果不带参数，判断下一个选项<br>这样一个字节一个字节地判断很容易出bug(如下)</p><ol><li>判断选项合法性(1st-&gt;’-‘,2ed-&gt;字母,3rd-&gt;’ ‘)</li><li>带参数时，注意：<ol><li>前面已经有参数，后出现的参数覆盖前面的</li><li>前面已经有参数，后出现的相同选项参数不合法（这时还是要输出前面的参数），故不能轻易len[now]&#x3D;0</li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int n, m, dict[30], T, ck[30], len[30];</span><br><span class="line">char s[300], str[30][300];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span><br><span class="line">    scanf(&quot;%s&quot;, s + 1);</span><br><span class="line">    memset(dict, 0, sizeof(dict));</span><br><span class="line">    for (int i = 1; i &lt;= strlen(s + 1); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (s[i] == &#x27;:&#x27;)</span><br><span class="line">            continue;</span><br><span class="line">        if (i &lt; strlen(s + 1) &amp;&amp; s[i + 1] == &#x27;:&#x27;)</span><br><span class="line">            dict[s[i] - &#x27;a&#x27;] = 2;</span><br><span class="line">        else</span><br><span class="line">            dict[s[i] - &#x27;a&#x27;] = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;T);</span><br><span class="line">    getchar();</span><br><span class="line">    for (int o = 1; o &lt;= T; o++)</span><br><span class="line">    &#123;</span><br><span class="line">        fgets(s, 270, stdin);</span><br><span class="line">        if (s[strlen(s) - 1] == &#x27;\n&#x27;)</span><br><span class="line">            s[strlen(s) - 1] = &#x27;\0&#x27;;</span><br><span class="line">        int i = 0, m = strlen(s) - 1, now;</span><br><span class="line">        memset(ck, 0, sizeof(ck));</span><br><span class="line">        memset(str, 0, sizeof(str));</span><br><span class="line">        while (s[i] != &#x27; &#x27;)</span><br><span class="line">            i++;</span><br><span class="line">        i++;</span><br><span class="line">        while (i &lt; m)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            if (s[i] != &#x27;-&#x27; || s[i + 1] &lt; &#x27;a&#x27; || s[i + 1] &gt; &#x27;z&#x27; || !dict[s[i + 1] - &#x27;a&#x27;] || (i + 2 &lt;= m &amp;&amp; s[i + 2] != &#x27; &#x27;))</span><br><span class="line">                break;</span><br><span class="line">            i++;</span><br><span class="line">            now = s[i] - &#x27;a&#x27;;</span><br><span class="line">            ck[now] = 1;</span><br><span class="line">            if (dict[now] == 2)</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">                if (i &gt;= m || s[i + 1] == &#x27; &#x27;)</span><br><span class="line">                    break;</span><br><span class="line">                len[now] = 0;</span><br><span class="line">                while (i &lt; m &amp;&amp; s[i + 1] != &#x27; &#x27;)</span><br><span class="line">                    str[now][len[now]++] = s[++i];</span><br><span class="line">            &#125;</span><br><span class="line">            i += 2;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;Case %d: &quot;, o);</span><br><span class="line">        for (int i = 0; i &lt;= &#x27;z&#x27; - &#x27;a&#x27;; i++)</span><br><span class="line">            if (ck[i])</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;-%c &quot;, &#x27;a&#x27; + i);</span><br><span class="line">                if (dict[i] == 2)</span><br><span class="line">                &#123;</span><br><span class="line">                    for (int j = 0; j &lt; len[i]; j++)</span><br><span class="line">                        printf(&quot;%c&quot;, str[i][j]);</span><br><span class="line">                    printf(&quot; &quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Code2:</p><p>比较容易做的思路：对于一个选项，先判断合法性和是否已经存在，接着输入下一个串。再判断该选项是否有参数。无参数则第二个串为选项；有参数则第二个串为第一个串的参数。</p><p>用map做（其实识别符是小写字母，不用map也可以）（回顾一下map）<br>若选项带参数，需要输出最后一个参数。这个问题用一个map来解决，map的key为选项，value储存最后一次出现的参数。</p><p>注意strtok的用法：<code>char *strtok(char[s],const char *delim)</code><br>分解字符串为一组字符串。s为要分解的字符串，delim为分隔符字符（如果传入字符串，则传入的字符串中每个字符均为分割符）。首次调用时，s指向要分解的字符串，之后再次调用要把s设成NULL。</p><p>注意：mp中没出现过的选项才加入map中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int n;</span><br><span class="line">string dict;</span><br><span class="line">char word[270];</span><br><span class="line">int T, flag, pos;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span><br><span class="line">    cin &gt;&gt; dict;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;T);</span><br><span class="line">    getchar();</span><br><span class="line">    for (int o = 1; o &lt;= T; o++)</span><br><span class="line">    &#123;</span><br><span class="line">        map&lt;string, string&gt; mp;</span><br><span class="line">        flag = 0;</span><br><span class="line">        cin.getline(word, 270, &#x27;\n&#x27;);</span><br><span class="line">        char *cmd = strtok(word, &quot; &quot;);</span><br><span class="line">        char *temp = NULL;</span><br><span class="line">        cmd = strtok(NULL, &quot; &quot;);</span><br><span class="line">        while (cmd)</span><br><span class="line">        &#123;</span><br><span class="line">            if (strlen(cmd) != 2 || cmd[0] != &#x27;-&#x27;)</span><br><span class="line">                break;</span><br><span class="line">            pos = dict.find(cmd[1]);</span><br><span class="line">            if (pos == -1)</span><br><span class="line">                break;</span><br><span class="line">            if (mp.find(cmd) == mp.end())</span><br><span class="line">                mp[cmd] = &quot;&quot;;</span><br><span class="line">            temp = strtok(NULL, &quot; &quot;);</span><br><span class="line">            if (dict[pos + 1] == &#x27;:&#x27; &amp;&amp; temp)</span><br><span class="line">            &#123;</span><br><span class="line">                mp[cmd] = temp;</span><br><span class="line">                flag = 1;</span><br><span class="line">            &#125;</span><br><span class="line">            if (flag)</span><br><span class="line">            &#123;</span><br><span class="line">                cmd = strtok(NULL, &quot; &quot;);</span><br><span class="line">                flag = 0;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">                cmd = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        map&lt;string, string&gt;::iterator it = mp.begin();</span><br><span class="line">        printf(&quot;Case %d:&quot;, o);</span><br><span class="line">        for (; it != mp.end(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; &#x27; &#x27; &lt;&lt; it-&gt;first;</span><br><span class="line">            if (it-&gt;second != &quot;&quot;)</span><br><span class="line">                cout &lt;&lt; &#x27; &#x27; &lt;&lt; it-&gt;second;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ccf csp认证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter_debug_1</title>
      <link href="/2020/02/20/flutter-debug-1/"/>
      <url>/2020/02/20/flutter-debug-1/</url>
      
        <content type="html"><![CDATA[<!-- ![testestest](https://i.loli.net/2020/03/17/4zOVunPlgcmRUNf.jpg) --><h2 id="flutter-卡在Running-‘gradle-assembleDebug或者Falied"><a href="#flutter-卡在Running-‘gradle-assembleDebug或者Falied" class="headerlink" title="flutter 卡在Running ‘gradle assembleDebug或者Falied"></a>flutter 卡在Running ‘gradle assembleDebug或者Falied</h2><p>原因是：大多是卡墙吧</p><p>解决办法：<br>1、全程开启VPN或者在国外开发<br>2、修改android目录下的build.gradle文件,用阿里云的代理</p><span id="more"></span><ol><li><p><strong>修改本项目中<code>android/build.gradle</code>文件（仅本项目有效）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ext.kotlin_version = &#x27;1.2.71&#x27;</span><br><span class="line">    repositories &#123;</span><br><span class="line">//        google()</span><br><span class="line">//        jcenter()</span><br><span class="line">        maven &#123; url &#x27;https://maven.aliyun.com/repository/google&#x27; &#125;</span><br><span class="line">        maven &#123; url &#x27;https://maven.aliyun.com/repository/jcenter&#x27; &#125;</span><br><span class="line">        maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/groups/public&#x27; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &#x27;com.android.tools.build:gradle:3.2.1&#x27;</span><br><span class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">//        google()</span><br><span class="line">//        jcenter()</span><br><span class="line">        maven &#123; url &#x27;https://maven.aliyun.com/repository/google&#x27; &#125;</span><br><span class="line">        maven &#123; url &#x27;https://maven.aliyun.com/repository/jcenter&#x27; &#125;</span><br><span class="line">        maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/groups/public&#x27; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rootProject.buildDir = &#x27;../build&#x27;</span><br><span class="line">subprojects &#123;</span><br><span class="line">    project.buildDir = &quot;$&#123;rootProject.buildDir&#125;/$&#123;project.name&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">subprojects &#123;</span><br><span class="line">    project.evaluationDependsOn(&#x27;:app&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(type: Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>修改Flutter的配置文件, 该文件在<code>Flutter安装目录/packages/flutter_tools/gradle/flutter.gradle</code>（全局配置）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        //修改的地方</span><br><span class="line">        //google()</span><br><span class="line">        //jcenter()</span><br><span class="line">        maven &#123; url &#x27;https://maven.aliyun.com/repository/google&#x27; &#125;</span><br><span class="line">        maven &#123; url &#x27;https://maven.aliyun.com/repository/jcenter&#x27; &#125;</span><br><span class="line">        maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/groups/public&#x27; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &#x27;com.android.tools.build:gradle:3.2.1&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="AndroidStudio-SSL-peer-shut-down-incorrectly-问题和plugin-Market插件下载失败问题"><a href="#AndroidStudio-SSL-peer-shut-down-incorrectly-问题和plugin-Market插件下载失败问题" class="headerlink" title="AndroidStudio SSL peer shut down incorrectly 问题和plugin Market插件下载失败问题"></a>AndroidStudio <code>SSL peer shut down incorrectly</code> 问题和<code>plugin Market</code>插件下载失败问题</h2><p>AndroidStudio 编译时出现 <code>SSL peer shut down incorrectly</code> 或者某些jar包下载不下来，多半是也是墙的原因导致的。</p><p>解决方法：</p><p>1.配置镜像来解决这个问题。（为了提高jar包的下载速度也可以配置）配置的方法就是在根<code>build.gradle</code>中添加镜像仓库，一般我们选择阿里的 <a href="http://maven.aliyun.com/nexus/content/groups/public/">http://maven.aliyun.com/nexus/content/groups/public/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line"></span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27; &#125;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &#x27;com.android.tools.build:gradle:3.2.1&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27; &#125;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(type: Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.配置HTTP proxy</p><ol><li><p>网传<code>File-&gt;Settings-&gt;Apparence &amp; Behavior-&gt;System Settings-&gt;Updates-&gt;use secure connnection</code> 勾去掉即可</p></li><li><p>国内镜像:<code>Auto-detect proxy settings</code>中添加国内镜像端口<br>网传镜像源地址：</p><p> 1)东软信息学院<br> mirrors.neusoft.edu.cn     端口：80</p><p> 2）北京化工大学<br> ubuntu.buct.edu.cn&#x2F;ubuntu.buct.cn  端口：80</p><p> 3)中国科学院开源协会<br> mirrors.opencas.cn (mirrors.opencas.org&#x2F;mirrors.opencas.ac.cn)  端口：80</p><p> 4)上海GDG镜像服务器<br> sdk.gdgshanghai.com   端口：8000</p><p> 5)电子科技大学(用不了，不知道是倒闭了还是怎么的)<br> mirrors.dormforce.net  端口：80</p></li><li><p>配置<code>ss</code>代理：<br>如图 <img src="https://i.loli.net/2020/03/17/d4oj7tsZlYGcV3q.png" alt="http proxy"><br>其中<code>Port number</code>即为ss的端口号<br>但是这样只能下载sdk,这样配置之后有没有发现我们使用Gradle下载某些依赖的时候还是下载不下来，不对啊，我们吧㐊配置代理，那是应为gradle不支持socks代理，这里我们可以将socks转为http代理，或者给jvm设置代理</p><p><code>org.gradle.jvmargs=-DsocksProxyHost=127.0.0.1 -DsocksProxyPort=1080</code></p><p>在AS中我们可以直接给JVM设置代理。在我们的跟目录的 gradle.properties 加上以下配置就可以下载了。<img src="https://i.loli.net/2020/03/17/vJjmqc2KtRdna4U.jpg" alt="JVM"></p></li></ol><ol start="4"><li>去<a href="https://plugins.jetbrains.com/androidstudio">JetBrains Plugin Repository</a>网上下载离线插件，然后进行本地安装。<br>  注意下载Plug的build版本对应AS <img src="https://i.loli.net/2020/03/17/o9WberuUP6Yq3kM.png" alt="JetBrains Plugin"></li></ol><hr><h2 id="Your-app-isn’t-using-AndroidX错误"><a href="#Your-app-isn’t-using-AndroidX错误" class="headerlink" title="Your app isn’t using AndroidX错误"></a>Your app isn’t using AndroidX错误</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[!] Your app isn&#x27;t using AndroidX.</span><br><span class="line">    To avoid potential build failures, you can quickly migrate your app by following the steps on https://goo.gl/CP92wY.</span><br></pre></td></tr></table></figure><p>这个提示是说项目并没有使用AndroidX</p><ol><li><p><strong>在<code>gradle.properties</code>中添加如下代码即可</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android.enableJetifier=true</span><br><span class="line">android.useAndroidX=true</span><br></pre></td></tr></table></figure></li><li><p><strong>更新至最新的 distributionUrl</strong><br>文件路径：<code>android/gradle/wrapper/gradle-wrapper.properties</code><br>一般的话 以你默认创建的flutter工程 下的为准</p></li><li><p><strong>更新 Module 中 build.gradle SDK 版本</strong><br>文件路径：<code>android/app/build.gradle</code><br>一般改为28及其以上就OK了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    //修改为28以上</span><br><span class="line">    compileSdkVersion 28</span><br><span class="line"></span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        disable &#x27;InvalidPackage&#x27;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).</span><br><span class="line">        applicationId &quot;com.example.flutterinstaclone&quot;</span><br><span class="line">        minSdkVersion 16</span><br><span class="line">        //修改为28以上</span><br><span class="line">        targetSdkVersion 28</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName &quot;1.0&quot;</span><br><span class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            // TODO: Add your own signing config for the release build.</span><br><span class="line">            // Signing with the debug keys for now, so `flutter run --release` works.</span><br><span class="line">            signingConfig signingConfigs.debug</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="No-toolchains-found-in-the-NDK-toolchains-folder-for-ABI-with-prefix-mipsel-linux-android错误"><a href="#No-toolchains-found-in-the-NDK-toolchains-folder-for-ABI-with-prefix-mipsel-linux-android错误" class="headerlink" title="No toolchains found in the NDK toolchains folder for ABI with prefix: mipsel-linux-android错误"></a><strong>No toolchains found in the NDK toolchains folder for ABI with prefix: mipsel-linux-android错误</strong></h2><h3 id="相关背景"><a href="#相关背景" class="headerlink" title="相关背景"></a>相关背景</h3><p>NDK,是Native Development Kit的缩写，这是 Android的一个工具开发包，与java语言没有直接的关系<br>Native就是指C、C++这些语言<br>使用NDK可以快速开发C、C++的动态库，并自动将这些so文件与其他内容一起打包成APK</p><h3 id="NDK目录：Android-Studio的SDK-tools中可见。"><a href="#NDK目录：Android-Studio的SDK-tools中可见。" class="headerlink" title="NDK目录：Android Studio的SDK tools中可见。"></a>NDK目录：Android Studio的SDK tools中可见。</h3><ol><li><p>下载ndk中的<code>mipsel-linux-android</code>包<br>亲测无用,因为官方新版的ndk已经没有mipsel了,不死心的可以在这个地址下载(需要访问google)<br><a href="https://developer.android.com/ndk/downloads/?hl=zh-cn">ndk下载地址</a><br><a href="https://developer.android.com/ndk/downloads/older_releases.html?hl=zh-cn">旧版ndk下载地址16b(2017年12月)</a> 可以下到<br>解压<code>mipsel-linux-android</code>放入<code>toolchains</code>就可以了</p></li><li><p>google 不推荐使用 mipsel ，但是很多库还是检测它是否存在，如果不存在就报错，其实可以创建空文件夹或者<br><code>ln -s arm-linux-androideabi-4.9 mipsel-linux-android</code><br> 其实都一样占个位置而已防止检测不通过编译失败, 这种方式也不推荐,因为官方都放弃了,还用它干什么呢</p></li><li><p>这种方式也是最简单的方式,也是最合理的方式,推荐使用较新版本的gradle plugin, 直接升级到3.1.3以上重新编译即可<br>在<code>\android\build.gradle</code>下编辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">        classpath &#x27;com.android.tools.build:gradle:3.1.3&#x27;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>override 的用法</title>
      <link href="/2020/02/18/usage-of-override/"/>
      <url>/2020/02/18/usage-of-override/</url>
      
        <content type="html"><![CDATA[<h2 id="Override是伪代码-表示重写。-当然不写-Override也可以-，不过写上有如下好处"><a href="#Override是伪代码-表示重写。-当然不写-Override也可以-，不过写上有如下好处" class="headerlink" title="@Override是伪代码,表示重写。(当然不写@Override也可以)，不过写上有如下好处:"></a>@Override是伪代码,表示重写。(当然不写@Override也可以)，不过写上有如下好处:</h2><p>1、可以当注释用,方便阅读；<br>2、编译器可以给你验证@Override下面的方法名是否是你父类中所有的，如果没有则报错。例如，你如果没写@Override，而你下面的方法名又写错了，这时你的编译器是可以编译通过的，因为编译器以为这个方法是你的子类中自己增加的方法。</p><p>举例：在重写父类的onCreate时，在方法前面加上@Override 系统可以帮你检查方法的正确性。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onCreate(Bundle savedInstanceState)</span><br><span class="line">&#123;…….&#125;</span><br></pre></td></tr></table></figure><p>这种写法是正确的，如果你不小心写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void oncreate(Bundle savedInstanceState)</span><br><span class="line">&#123;…….&#125;</span><br></pre></td></tr></table></figure><p>编译器会报如下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The method oncreate(Bundle) of type HelloWorld must override or implement a supertype method</span><br></pre></td></tr></table></figure><p>以确保你正确重写onCreate方法（因为oncreate应该为onCreate）。</p><p>而如果不加@Override，则编译器将不会检测出错误，而是会认为你为子类定义了一个新方法：oncreate</p>]]></content>
      
      
      
        <tags>
            
            <tag> flutter 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown_handbook</title>
      <link href="/2020/02/16/Markdown_handbook/"/>
      <url>/2020/02/16/Markdown_handbook/</url>
      
        <content type="html"><![CDATA[<h2 id="先附上原文github链接和top-starred-repo"><a href="#先附上原文github链接和top-starred-repo" class="headerlink" title="先附上原文github链接和top starred repo:"></a>先附上原文github链接和top starred repo:</h2><p><a href="https://github.com/younghz/Markdown">本文原链</a></p><p><a href="https://github.com/adam-p/markdown-here">Markdown-here(浏览器兼容)</a></p><p><a href="https://github.com/Python-Markdown/markdown">Python-Markdown</a></p><p><a href="https://github.com/tchapi/markdown-cheatsheet">Markdown-cheatsheet</a></p><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><h4 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown<em>是什么</em>？</h4><h4 id="谁创造了它？"><a href="#谁创造了它？" class="headerlink" title="谁创造了它？"></a><em>谁</em>创造了它？</h4><h4 id="为什么要使用它？"><a href="#为什么要使用它？" class="headerlink" title="为什么要使用它？"></a><em>为什么</em>要使用它？</h4><h4 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a><em>怎么</em>使用？</h4><h4 id="谁在用？"><a href="#谁在用？" class="headerlink" title="谁在用？"></a><em>谁</em>在用？</h4><h4 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h4><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-Markdown是什么？"><a href="#1-Markdown是什么？" class="headerlink" title="1. Markdown是什么？"></a>1. Markdown<em>是什么</em>？</h3><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    </p><h3 id="2-谁创造了它？"><a href="#2-谁创造了它？" class="headerlink" title="2. 谁创造了它？"></a>2. <em>谁</em>创造了它？</h3><p>它由<a href="http://www.aaronsw.com/"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。</p><p>他有着足以让你跪拜的人生经历：    </p><ul><li><strong>14岁</strong>参与RSS 1.0规格标准的制订。     </li><li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。   </li><li><strong>2005</strong>年创建<a href="http://infogami.org/">Infogami</a>，之后与<a href="http://www.reddit.com/">Reddit</a>合并成为其合伙人。   </li><li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   </li><li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     </li><li><strong>2013</strong>年1月自杀身亡。</li></ul><p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt="Aaron Swartz"></p><p>天才都有早逝的归途。</p><h3 id="3-为什么要使用它？"><a href="#3-为什么要使用它？" class="headerlink" title="3. 为什么要使用它？"></a>3. <em>为什么</em>要使用它？</h3><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><h3 id="4-怎么使用？"><a href="#4-怎么使用？" class="headerlink" title="4. 怎么使用？"></a>4. <em>怎么</em>使用？</h3><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a>4.1 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题   "></a>一级标题   </h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote><p>2）使用<code>#</code>，可表示1-6级标题。</p><blockquote><p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p></blockquote><p>效果：</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a>4.2 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a>4.3 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p><blockquote><p>&gt; 区块引用<br>&gt;&gt; 嵌套引用  </p></blockquote><p>效果：</p><blockquote><p>区块引用  </p><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a>4.4 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}</p><p>代码区块：</p><pre><code>void main()&#123;    printf(&quot;Hello, Markdown.&quot;);&#125;</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a>4.5 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p>*斜体*，_斜体_<br>**粗体**，__粗体__</p></blockquote><p>效果：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a>4.6 列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p><blockquote><p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p></blockquote><p>效果：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a>4.7 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a>4.8 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p><blockquote><p>[younghz的Markdown库](https::&#x2F;&#x2F;github.com&#x2F;younghz&#x2F;Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库</a>。</p></blockquote><p><strong>参考式</strong>：</p><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https::&#x2F;&#x2F;github.com&#x2F;younghz&#x2F;Markdown “Markdown”<br>[2]:https::&#x2F;&#x2F;github.com&#x2F;younghz&#x2F;Markdown “Markdown”    </p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库1</a><br><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库2</a></p></blockquote><p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a>4.9 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a>4.10 反斜杠<code>\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-96-’"><a href="#4-11-符号’-96-’" class="headerlink" title="4.11 符号’&#96;’"></a>4.11 符号’&#96;’</h4><p>起到标记作用。如：</p><blockquote><p>`ctrl+a`</p></blockquote><p>效果：</p><blockquote><p><code>ctrl+a</code>    </p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a>5. <em>谁</em>在用？</h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a>6. 尝试一下</h4><ul><li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错   </li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。    </li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。</li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><hr><p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><hr><h3 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h3><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有<code>:</code>则表示居中，若不加<code>:</code>则默认左对齐。</p>]]></content>
      
      
      
        <tags>
            
            <tag> modle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/10/hello-world/"/>
      <url>/2020/02/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
